version: 2
jobs:
  linux_build:
    docker:
      - image: "circleci/rust:1.36.0"
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Create workspace
          command: mkdir -p /tmp/workspace
      - run:
          name: Install required dependencies
          command: |
            sudo apt update
            sudo apt install -y musl musl-tools
      - run:
          name: Install build target
          command: rustup target add x86_64-unknown-linux-musl
      - run:
          name: Run tests
          command: cargo test --target x86_64-unknown-linux-musl
      - run:
          name: Build executable
          command: cargo build --target x86_64-unknown-linux-musl
      - run:
          name: Copy build to workspace
          command: cp -R target /tmp/workspace/
      - persist_to_workspace:
          root: /tmp/workspace/
          paths: target/x86_64*
      - store_artifacts:
          path: target/x86_64-unknown-linux-musl/debug/deployment-cli
  macos_build:
    docker:
      - image: "circleci/rust:1.36.0"
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Create workspace
          command: mkdir -p /tmp/workspace
      - run:
          name: Install required dependencies
          command: |
            sudo apt update
            sudo apt install wget git clang cmake
      - run:
          name: Install build target
          command: rustup target add x86_64-apple-darwin
      - run:
          name: Install osxcross
          command: sudo ./buildscripts/setup_osxcross.sh
      - run:
          name: Copy cargo configuration to the expected path
          command: |
            mkdir .cargo
            cp buildscripts/cargo_config .cargo/config
      - run:
          name: Build executable
          environment:
            TARGET_CC: '/usr/local/osx-ndk-x86/bin/x86_64-apple-darwin15-cc'
            PKG_CONFIG_ALLOW_CROSS: '1'
          command: cargo build --release --target x86_64-apple-darwin
      - run:
          name: Copy build to workspace
          command: cp -R target /tmp/workspace/
      - persist_to_workspace:
          root: /tmp/workspace/
          paths: target/x86_64*
      - store_artifacts:
          path: target/x86_64-apple-darwin/release/deployment-cli
  docker_release:
    machine: true
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Copy binary to directory of Dockerfile
          command: cp /tmp/workspace/target/x86_64-unknown-linux-musl/debug/deployment-cli deployment-cli
      - run:
          name: Build docker image
          command: docker build -t navikt/deployment-cli:$CIRCLE_SHA1 .
      - run:
          name: Docker push
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
            if [ -n "${CIRCLE_TAG}" ]; then
                VERSION="$(printf "$CIRCLE_TAG" | cut -c 5-)"
                docker tag navikt/deployment-cli:$CIRCLE_SHA1 navikt/deployment-cli:$VERSION
                docker push navikt/deployment-cli:$VERSION
            else
                docker tag navikt/deployment-cli:$CIRCLE_SHA1 navikt/deployment-cli:latest
                docker push navikt/deployment-cli:$CIRCLE_SHA1
                docker push navikt/deployment-cli:latest
            fi
  github_release:
    docker:
      - image: "circleci/golang:1.13"
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install ghr
          command: go get github.com/tcnksm/ghr
      - run:
          name: Install xz
          command: sudo apt install -y xz-utils
      - run:
          name: Compress files
          command: |
            mkdir artifacts
            VERSION="$(printf "$CIRCLE_TAG" | cut -c 5-)"
            cat /tmp/workspace/target/x86_64-unknown-linux-musl/debug/deployment-cli | lzma > artifacts/deployment-cli-$VERSION-x86_64-unknown-linux-musl.xz
            cat /tmp/workspace/target/x86_64-apple-darwin/release/deployment-cli | lzma > artifacts/deployment-cli-$VERSION-x86_64-apple-darwin.xz
      - run:
          name: Create release
          command: ghr -t "$(/tmp/workspace/target/x86_64-unknown-linux-musl/debug/deployment-cli token)" -u navikt -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${CIRCLE_SHA1} artifacts/
workflows:
  version: 2
  build_and_release:
    jobs:
      - linux_build:
          filters:
            tags:
              only: /^cli-.+/
      - macos_build:
          filters:
            tags:
              only: /^cli-.+/
      - docker_release:
          requires:
            - linux_build
            - macos_build
          filters:
            branches:
              only: master
            tags:
              only: /^cli-.+/
      - github_release:
          requires:
            - linux_build
            - macos_build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^cli-.+/
only: master
